// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  name             String
  password         String
  createAt         DateTime?      @default(now())
  updateAt         DateTime?      @updatedAt
  Post             Post[]
  Profile          Profile?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Comment          Comment[]
  CommentVote      CommentVote[]
  Vote             Vote[]
  createSubreddits Subreddit[]    @relation("CreateBy")
  Subscription     Subscription[]
}

model Role {
  id         String @id @default(uuid())
  roleName   String
  roleNumber Int
}

model Profile {
  id       String     @id @default(uuid())
  bio      String?
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @unique
  // PostLike PostLike[]
}

model File {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  postId   String   @unique
  post     Post     @relation(fields: [postId], references: [id])
}

model PostLike {
  id        String   @id @default(uuid())
  createAt  DateTime @default(now())
  // postId    String
  // post      Post     @relation(fields: [postId], references: [id])
  // profileId String
  // profile   Profile  @relation(fields: [profileId], references: [id])
}

model Subreddit {
  id       String   @id @default(uuid())
  name     String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  posts    Post[]

  creatorId   String
  creator     User?          @relation("CreateBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  title       String    @db.VarChar(255)
  content     Json?
  published   Boolean?  @default(false)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  // postLike    PostLike[]
  file        File?
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
}

enum VoteType {
  UP
  DOWN
}

model Comment {
  id        String    @id @default(uuid())
  text      String
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

// model Job {
//   id String @id @default(uuid())
//   code String
//   name String
//   description String
// }
